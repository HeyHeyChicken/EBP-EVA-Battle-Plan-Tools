# Copyright (c) 2025, Antoine Duval
# This file is part of a source-visible project.
# See LICENSE for terms. Unauthorized use is prohibited.

permissions:
  contents: write

name: Build cross-platform

on:
  push:
    tags:
      - "*"

jobs:
  # On créé la version Linux de l'application.
  # build-linux:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     # On installe les dépendances de l'application.
  #     - name: Install dependencies
  #       run: sudo apt-get update && sudo apt-get install -y nlohmann-json3-dev libopencv-dev tesseract-ocr libtesseract-dev
  #     # On compile le code C++ de l'application.
  #     - name: Build
  #       run: |
  #         mkdir -p build && cd build
  #         cmake -DSOURCE_FILE=src/detector/script.cpp ..
  #         make
  #         mkdir -p release
  #         cp linux release/linux
  #     # On upload la release.
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: linux
  #         path: build/release/linux

  # # On créé la version MacOS de l'application.
  # build-macos:
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     # On installe les dépendances de l'application.
  #     - name: Install dependencies
  #       run: brew install opencv tesseract nlohmann-json
  #     # On compile le code C++ de l'application.
  #     - name: Build
  #       run: |
  #         mkdir -p build && cd build
  #         cmake -DSOURCE_FILE=src/detector/script.cpp -DCMAKE_CXX_FLAGS="-I/opt/homebrew/include" -DCMAKE_EXE_LINKER_FLAGS="-L/opt/homebrew/lib" ..
  #         make
  #         mkdir -p release
  #         cp darwin release/darwin
  #     # On upload la release.
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: darwin
  #         path: build/release/darwin

  # On créé la version Windows de l'application.
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      # Installation de Node.js pour construire l'app Electron
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      # Installation des dépendances NPM
      - name: Install Node dependencies
        run: npm install
      # Build Angular project
      - name: Build Angular app
        run: npm run build
      - name: Move Angular build to static folder
        run: |
          Remove-Item -Recurse -Force src\static\*
          Move-Item -Path dist\ebp\browser\* -Destination src\static\
      # Build de l'application Electron
      - name: Build Electron app
        run: npm run make
      # Rename artifact
      - name: Rename .exe
        run: |
          $file = Get-ChildItem -Path "out/make/squirrel.windows/x64/" -Filter *.exe | Select-Object -First 1
          Rename-Item -Path $file.FullName -NewName "windows.exe"
      # Upload du setup.exe
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: out/make/squirrel.windows/x64/*.exe

  # On déploie les nouvelles versions
  deploy-builds:
    runs-on: ubuntu-latest
    needs: [build-windows] # build-linux, build-macos,
    steps:
      # On récupère le numéro de version de l'application.
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

      # - name: Download linux artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: linux
      #     path: ./release

      # - name: Download darwin artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: darwin
      #     path: ./release

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: ./release

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      # - name: Upload linux asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./release/linux
      #     asset_name: linux
      #     asset_content_type: application/octet-stream

      # - name: Upload MacOS asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./release/darwin
      #     asset_name: darwin
      #     asset_content_type: application/octet-stream

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/windows.exe
          asset_name: Windows-EBP-ReplayCutter-Installer.exe
          asset_content_type: application/octet-stream
